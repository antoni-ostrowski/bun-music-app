/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteRouteImport } from './routes/settings/route'
import { Route as FavouriteTracksRouteRouteImport } from './routes/favourite-tracks/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PlaylistPlaylistIdRouteRouteImport } from './routes/playlist/$playlistId/route'

const SettingsRouteRoute = SettingsRouteRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const FavouriteTracksRouteRoute = FavouriteTracksRouteRouteImport.update({
  id: '/favourite-tracks',
  path: '/favourite-tracks',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistPlaylistIdRouteRoute = PlaylistPlaylistIdRouteRouteImport.update({
  id: '/playlist/$playlistId',
  path: '/playlist/$playlistId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/favourite-tracks': typeof FavouriteTracksRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/favourite-tracks': typeof FavouriteTracksRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/favourite-tracks': typeof FavouriteTracksRouteRoute
  '/settings': typeof SettingsRouteRoute
  '/playlist/$playlistId': typeof PlaylistPlaylistIdRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/favourite-tracks' | '/settings' | '/playlist/$playlistId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/favourite-tracks' | '/settings' | '/playlist/$playlistId'
  id:
    | '__root__'
    | '/'
    | '/favourite-tracks'
    | '/settings'
    | '/playlist/$playlistId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FavouriteTracksRouteRoute: typeof FavouriteTracksRouteRoute
  SettingsRouteRoute: typeof SettingsRouteRoute
  PlaylistPlaylistIdRouteRoute: typeof PlaylistPlaylistIdRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favourite-tracks': {
      id: '/favourite-tracks'
      path: '/favourite-tracks'
      fullPath: '/favourite-tracks'
      preLoaderRoute: typeof FavouriteTracksRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlist/$playlistId': {
      id: '/playlist/$playlistId'
      path: '/playlist/$playlistId'
      fullPath: '/playlist/$playlistId'
      preLoaderRoute: typeof PlaylistPlaylistIdRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FavouriteTracksRouteRoute: FavouriteTracksRouteRoute,
  SettingsRouteRoute: SettingsRouteRoute,
  PlaylistPlaylistIdRouteRoute: PlaylistPlaylistIdRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
